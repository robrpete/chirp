import type { GetStaticProps, NextPage } from "next";
import { api } from "~/utils/api";
import Image from "next/Image";
import Head from "next/head";

const ProfilePage: NextPage<{ username: string}> = ({ username }) => {
  const {data, isLoading} = api.profile.getUserByUsername.useQuery({
    username: username,
  })

  if(isLoading){console.log("is loading!!!!")}
  if(!data) return <div>404</div>

  return (
    <>
      <Head>
        <title>{data.username}</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <PageLayout>
          <div className="relative h-36 bg-blue-600">
            <Image 
              src={data.profileImageUrl} 
              width={128} 
              height={128} 
              alt="profileImage"
              className="absolute bottom-0 left-0 -mb-[64px] ml-4 rounded-full border-4 border-black" />
          </div>
          <div className="h-[64px]"></div>
          <div className="p-4 text-2xl font-bold">{`@${data.username ?? ""}`}</div>
          <div className="border-b border-slate-400 w-full"></div>
      </PageLayout>
    </>
  );
};

import { createServerSideHelpers } from '@trpc/react-query/server';
import { appRouter } from "~/server/api/root";
import { prisma } from "~/server/db";
import superjson from "superjson";
import { PageLayout } from "~/components/layout";

export const getStaticProps: GetStaticProps = async (context) => {
  const ssg = createServerSideHelpers({
    router: appRouter,
    ctx: {prisma, userId: null},
    transformer: superjson, // optional - adds superjson serialization
  });

  const slug = context.params?.slug;

  if (typeof slug !== "string") throw new Error("no slug");

  const username = slug.replace("@", "");

  await ssg.profile.getUserByUsername.prefetch({ username });

  return {
    props: {
      trpcState: ssg.dehydrate(),
      username,
    },
  };
};

export const getStaticPaths = () => {
  return { paths: [], fallback: "blocking" };
};
export default ProfilePage;

